
# Lines above this one are auto-generated by the wrapper to provide as params:
# i
import time
import osmosis.multi_bvals as sfm_mb
import osmosis.predict_n as pn
import nibabel as nib
import os
import numpy as np

if __name__=="__main__":
    t1 = time.time()
    data_path = "/biac4/wandell/data/klchan13/100307/Diffusion/data"
    
    data_file = nib.load(os.path.join(data_path, "data.nii.gz"))
    wm_data_file = nib.load(os.path.join(data_path,"wm_mask_registered.nii.gz"))
    
    data = data_file.get_data()
    wm_data = wm_data_file.get_data()
    wm_idx = np.where(wm_data==1)
    
    bvals = np.loadtxt(os.path.join(data_path, "bvals"))
    bvecs = np.loadtxt(os.path.join(data_path, "bvecs"))
    
    low = i*270
    # Make sure not to go over the edge of the mask:
    high = np.min([(i+1) * 270, int(np.sum(wm_data))])
    
    # Preserve memory by getting rid of this data:
    del wm_data

    # Now set the mask:
    mask = np.zeros(wm_data_file.shape)
    mask[wm_idx[0][low:high], wm_idx[1][low:high], wm_idx[2][low:high]] = 1

    # Predict 10% (n = 10)
    actual_all, predict_all = pn.predict_n(data, bvals/1000, bvecs,
                                                mask, 10, "all")
    actual_bvals, predict_bvals = pn.predict_n(data, bvals/1000, bvecs,
                                                mask, 10, "bvals")
   
    aff = np.eye(4)
    nib.Nifti1Image(actual_all, aff).to_filename("all_actual%s.nii.gz"%(i))
    nib.Nifti1Image(predict_all, aff).to_filename("all_predict%s.nii.gz"%(i)) 
    nib.Nifti1Image(actual_bvals, aff).to_filename("bvals_actual%s.nii.gz"%(i)) 
    nib.Nifti1Image(predict_bvals, aff).to_filename("bvals_predict%s.nii.gz"%(i)) 
    t2 = time.time()
    print "This program took %4.2f minutes to run."%((t2 - t1)/60.)