
# Lines above this one are auto-generated by the wrapper to provide as params:
# data_path, b, subject, data_i, alpha, rho, wm_file, i, ad, rd, params_file
import osmosis.model.sparse_deconvolution as ssd
import osmosis.io as oio
import nibabel as ni
import os
import numpy as np

if __name__=="__main__":
    
    subject_path = os.path.join(data_path, subject)
    wm_mask_file = os.path.join(subject_path, wm_file)
    wm_nifti = ni.load(wm_mask_file)
    wm_data = wm_nifti.get_data()
    wm_idx = np.where(wm_data==1)

    # Preserve memory by getting rid of this data:
    del wm_data

    # Now set the mask:
    mask = np.zeros(wm_nifti.shape)
    mask[wm_idx[0], wm_idx[1], wm_idx[2]] = 1

    solver_params = dict(alpha=alpha,
                         l1_ratio=l1_ratio,
                         fit_intercept=False,
                         positive=True)
            
    SD_1 = ssd.SparseDeconvolutionModel(*data[b][0],
                                        mask=mask,
                                        params_file=params_file1,
                                        solver_params=solver_params, 
                                        axial_diffusivity=ad,
                                        radial_diffusivity=rd)
            
    SD_2 = ssd.SparseDeconvolutionModel(*data[b][1],
                                        mask=mask,
                                        params_file=params_file2,
                                        solver_params=solver_params,
                                        axial_diffusivity=ad,
                                        radial_diffusivity=rd)
            
    rrmse = oza.cross_predict(SD_1, SD_2)
    rel = ssd.tensor_reliability(SD_1, SD_2, wm_mask)

    rrmse_fname = '%s/%s/RMSE_b%s_l1ratio%s_alpha%s.nii.gz'%(data_path,
                                                             subject
                                                             b,
                                                             l1_ratio,
                                                             alpha)
    rrmse_fname = '%s/%s/PDD_angle_b%s_l1ratio%s_alpha%s.nii.gz'%(data_path,
                                                             subject
                                                             b,
                                                             l1_ratio,
                                                             alpha)

    nib.Nifti1Image(rrmse, SD_1.affine).to_filename(rrmse_fname)
    nib.Nifti1Image(rel, SD_1.affine).to_filename(rel_fname)
