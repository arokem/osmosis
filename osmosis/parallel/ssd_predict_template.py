
# Lines above this one are auto-generated by the wrapper to provide as params:
# data_path, b, subject, data_i, alpha, rho, wm_file, i, ad, rd, params_file
import osmosis.model.sparse_deconvolution as ssd
import osmosis.model.dti as dti
import osmosis.model.analysis as oza
import osmosis.io as oio
import nibabel as ni
import os
import numpy as np


def tensor_reliability(SD_1, SD_2, wm_mask):
    """ 
    given two SD models, calculate the reliability of the PDD of the derived
    tensor models

    Parameters
    ----------

    SD_1, SD_2 : SparseDeconvolutionModel class instances

    wm_mask : ndarray

    Returns
    -------

    pdd_rel : ndarray
       The angular difference between the PDD of the two tensor models fit to
       the predicted data from each of the SD models.
    
    """
    pred1 = np.concatenate([SD_1.S0[...,np.newaxis], SD_1.fit], -1)
    pred2 = np.concatenate([SD_2.S0[...,np.newaxis], SD_2.fit], -1)
    
    new_bvecs1 = np.concatenate([np.array([[0,0,0]]).T,
                                 SD_1.bvecs[:, SD_1.b_idx]], -1)
    new_bvecs2 = np.concatenate([np.array([[0,0,0]]).T,
                                 SD_2.bvecs[:, SD_2.b_idx]], -1)
    
    # Freely assume that the bvals are the same 
    new_bvals = np.hstack([0, SD_1.bvals[:,SD_1.b_idx]])

    # 
    TM1 = dti.TensorModel(pred1, new_bvecs1, new_bvals,
                          mask=wm_mask, params_file="temp")
    TM2 = dti.TensorModel(pred2, new_bvecs2, new_bvals, mask=wm_mask,
                          params_file="temp")

    pdd_rel = oza.pdd_reliability(TM1, TM2)
    return pdd_rel


if __name__=="__main__":
    oio.data_path = data_path
    data = oio.get_dwi_data(b, subject)
    ad_rd = oio.get_ad_rd(subject, b)
    subject_path = os.path.join(data_path, subject)
    wm_mask_file = os.path.join(subject_path, wm_file)
    wm_nifti = ni.load(wm_mask_file)
    wm_data = wm_nifti.get_data()
    wm_idx = np.where(wm_data==1)

    # Preserve memory by getting rid of this data:
    del wm_data

    # Now set the mask:
    mask = np.zeros(wm_nifti.shape)
    mask[wm_idx[0], wm_idx[1], wm_idx[2]] = 1

    solver_params = dict(alpha=alpha,
                         l1_ratio=l1_ratio,
                         fit_intercept=False,
                         positive=True)
            
    SD_1 = ssd.SparseDeconvolutionModel(*data[0],
                                        mask=mask,
                                        params_file="temp",
                                        solver_params=solver_params, 
                                        axial_diffusivity=ad_rd[0]["AD"],
                                        radial_diffusivity=ad_rd[0]["RD"])
            
    SD_2 = ssd.SparseDeconvolutionModel(*data[1],
                                        mask=mask,
                                        params_file="temp",
                                        solver_params=solver_params,
                                        axial_diffusivity=ad_rd[1]["AD"],
                                        radial_diffusivity=ad_rd[1]["RD"])
            
    rrmse = oza.cross_predict(SD_1, SD_2)
    rel = tensor_reliability(SD_1, SD_2, mask)

    rrmse_fname = "%s/%s/RMSE_b%s_l1ratio%s_alpha%s.nii.gz"%(data_path,
                                                             subject,
                                                             b,
                                                             l1_ratio,
                                                             alpha)
    rel_fname = "%s/%s/PDD_angle_b%s_l1ratio%s_alpha%s.nii.gz"%(data_path,
                                                             subject,
                                                             b,
                                                             l1_ratio,
                                                             alpha)

    ni.Nifti1Image(rrmse, SD_1.affine).to_filename(rrmse_fname)
    ni.Nifti1Image(rel, SD_1.affine).to_filename(rel_fname)
