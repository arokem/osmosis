
# Lines above this one are auto-generated by the wrapper to provide as params:
# b_fit_to, b_predict
import time
import osmosis.multi_bvals as sfm_mb
import osmosis.model.dti as dti
import osmosis.predict_n as pn
from osmosis.utils import separate_bvals
import nibabel as nib
import os
import numpy as np
import osmosis.utils as ozu

if __name__=="__main__":
    t1 = time.time()
    b_idx1 = 0
    b_idx2 = 2
    
    data_path = "/biac4/wandell/data/klchan13/100307/Diffusion/data"
    
    data_file = nib.load(os.path.join(data_path, "data.nii.gz"))
    wm_data_file = nib.load(os.path.join(data_path,"wm_mask_registered.nii.gz"))
    
    data = data_file.get_data()
    wm_data = wm_data_file.get_data()
    wm_idx = np.where(wm_data==1)
    
    bvals = np.loadtxt(os.path.join(data_path, "bvals"))
    bvecs = np.loadtxt(os.path.join(data_path, "bvecs"))
    
    low = i*2000
    # Make sure not to go over the edge of the mask:
    high = np.min([(i+1) * 2000, int(np.sum(wm_data))])
    
    # Preserve memory by getting rid of this data:
    del wm_data

    # Now set the mask:
    mask = np.zeros(wm_data_file.shape)
    mask[wm_idx[0][low:high], wm_idx[1][low:high], wm_idx[2][low:high]] = 1
       
    # Predict 10% (n = 10)
    ad = {1000:1.6386920952169737, 2000:1.2919249903637751, 3000:0.99962593218241236}
    rd = {1000:0.33450124887561905, 2000:0.28377379537043729, 3000:0.24611723207420028}
    
    [actual1, actual2, predicted11,
     predicted13, predicted33, predicted31] = pn.predict_bvals(data, bvals, bvecs,
                                                                mask, ad, rd, b_idx1,
                                                                b_idx2, n = 10, mode = "kfold_xval")
                                                   
    aff = np.eye(4)
    np.save("/hsgs/nobackup/klchan13/predict_bvals11_%d.npy"%i, predicted11)
	np.save("/hsgs/nobackup/klchan13/predict_bvals13_%d.npy"%i, predicted13)
	np.save("/hsgs/nobackup/klchan13/predict_bvals33_%d.npy"%i, predicted33)
	np.save("/hsgs/nobackup/klchan13/predict_bvals31_%d.npy"%i, predicted31)
    t2 = time.time()
    print "This program took %4.2f minutes to run."%((t2 - t1)/60.)
