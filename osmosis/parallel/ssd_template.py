
# Lines above this one are auto-generated by the wrapper to provide as params:
# data_path, b, subject, data_i, alpha, rho, wm_file, i, ad, rd, params_file
import osmosis.model.sparse_deconvolution as ssd
import osmosis.io as oio
import nibabel as ni
import os
import numpy as np

if __name__=="__main__":
    oio.data_path = data_path
    data = oio.get_dwi_data(b, subject)[data_i]
    solver_params = dict(alpha=alpha,
                         rho=rho,
                         fit_intercept=False,
                         positive=True)

    subject_path = os.path.join(data_path, subject)
    wm_mask_file = os.path.join(subject_path, wm_file)
    wm_nifti = ni.load(wm_mask_file)
    wm_data = wm_nifti.get_data()
    wm_idx = np.where(wm_data==1)

    low = i*10000
    # Make sure not to go over the edge of the mask:
    high = np.min([(i+1) * 10000, int(np.sum(wm_data))])

    # Preserve memory by getting rid of this data:
    del wm_data

    # Now set the mask:
    mask = np.zeros(wm_nifti.shape)
    mask[wm_idx[0][low:high], wm_idx[1][low:high], wm_idx[2][low:high]] = 1

    SD = ssd.SparseDeconvolutionModel(*data, mask=mask,
                                      axial_diffusivity=ad,
                                      radial_diffusivity=rd,
                                      solver_params=solver_params,
                                      params_file=params_file)

    # This forces the calculation and saving to file:
    SD.model_params

